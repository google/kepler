## How to Run Unit Tests

blaze test :target --noforge

The unit tests currently required an externally running instance of postgres on
the workstation with a database called "test" and a user called "test" with
password "test".

### Install postgres on the workstation.
Example: https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart

Once you get the database prompt in Step 2:

CREATE USER test superuser password "test";
CREATE database test;

You may also benefit from:

CREATE USER <ldap> superuser;

Consider setting up a cronjob to clean up test databases. See comments in scripts/clean_up_test_databases.sh.

Test connection:

$ psql test -U test -h localhost --password

### Install the pg_stat_statements extension.
Example: https://pganalyze.com/docs/install/01_enabling_pg_stat_statements

At the database prompt:

CREATE EXTENSION pg_stat_statements;

Update shared_preload_libraries in the postgresql.conf. Location:

$ psql -U test -c 'SHOW config_file' -h localhost

Or at the database prompt:

SHOW config_file;

Edit the shared_preload_libraries line to included pg_stat_statements.

shared_preload_libraries = 'pg_stat_statements'

Restart postgres.

sudo service postgresql restart

## How to Speed Up The Parameter Generator

Early experiments demonstrated a query latency improvement of seconds/minutes vs
hours when Vertica was used instead of Postgres to generate parameters for
stack.

The following code is useful to add to query_utils to use Vertica. The client
library is not in third-party and Vertica is not used in any other part of the
training data pipeline, so this code is not submitted with query_utils.

1. Adjust imports and pip install vertica_python if necessary.
import vertica_python

2. Add a function to QueryManager to connect to Vertica using vertica_python.
def connect_vertica(self, database: str, schema: str) -> None:
  """Connects to a Vertica database using the vertica_python client."""

  self._database = database
  self._schema = schema
  conn_info = {
      'host': '127.0.0.1',
      'port': 5433,
      'user': 'dbadmin',
      'password': '',
      'database': self._database,
      # Autogenerated session label by default.
      'session_label': 'dataset',
      # Default throw error on invalid UTF-8 results.
      'unicode_error': 'strict',
      # SSL is disabled by default.
      'ssl': False,
      # Autocommit is off by default.
      'autocommit': True,
      # Using server-side prepared statements is disabled by default.
      'use_prepared_statements': False,
      # Connection timeout is not enabled by default.
      'connection_timeout': 1500000
  }

  self._conn = vertica_python.connect(**conn_info)
  self._cursor = self._conn.cursor()
  self._cursor.execute(f'set search_path to {self._schema};')
